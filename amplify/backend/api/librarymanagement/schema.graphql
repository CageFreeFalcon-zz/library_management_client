type UserNotification @model @auth(rules: [{allow: public}]) {
  id: ID!
  title: String
  subtitle: String
  content: AWSJSON
  img_path: AWSURL
  userna: String
}

type AdminNotification @model @auth(rules: [{allow: public}]) {
  id: ID!
  type: String
  title: String
  subtitle: String
  content: String
  data: AWSJSON
}

type Book @model @auth(rules: [{allow: public}]) {
  id: ID!
  isbn: String!
  title: String!
  subject: String!
  publisher: String!
  language: String!
  edition: String!
  no_of_pages: Int
  copies_present: Int!
  copies_issued: Int!
  BookItems: [BookItem] @connection(keyName: "byBook", fields: ["id"])
  Authors: [BookAuthor] @connection(keyName: "byBook", fields: ["id"])
}

type BookItem @model @auth(rules: [{allow: public}]) @key(name: "byRack", fields: ["rackID"]) @key(name: "byBook", fields: ["bookID"]) {
  id: ID!
  price: Int!
  status: Book_Status!
  added_on: AWSDate!
  rackID: ID!
  Transactions: [Transaction] @connection(keyName: "byBookItem", fields: ["id"])
  bookID: ID!
}

type Rack @model @auth(rules: [{allow: public}]) {
  id: ID!
  number: String!
  location: String!
  recently_used: Boolean
  BookItems: [BookItem] @connection(keyName: "byRack", fields: ["id"])
}

type Author @model @auth(rules: [{allow: public}]) {
  id: ID!
  name: String
  description: String
  books: [BookAuthor] @connection(keyName: "byAuthor", fields: ["id"])
}

type Barcode @model @auth(rules: [{allow: public}]) {
  id: ID!
  code: String!
  status: Barcode_status!
  created_at: AWSDate!
  Book: Book @connection
}

type Card @model @auth(rules: [{allow: public}]) {
  id: ID!
  card_number: Int!
  img_path: AWSURL!
  status: Card_Status!
  issued_on: AWSDate!
  username: String
}

type Transaction @model @auth(rules: [{allow: public}]) @key(name: "byBookItem", fields: ["bookitemID"]) {
  id: ID!
  issue_date: AWSDate!
  due_date: AWSDate!
  status: String!
  bookitemID: ID!
  Username: String
}

enum Book_Status {
  ISSUED
  NOTISSUED
  LOST
}

enum Card_Status {
  ISSUED
  DEPRICATED
}

enum Barcode_status {
  USED
  UNUSED
}

type BookAuthor @model(queries: null) @key(name: "byBook", fields: ["bookID", "authorID"]) @key(name: "byAuthor", fields: ["authorID", "bookID"]) @auth(rules: [{allow: public}, {allow: public}]) {
  id: ID!
  bookID: ID!
  authorID: ID!
  book: Book! @connection(fields: ["bookID"])
  author: Author! @connection(fields: ["authorID"])
}
 